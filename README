## Initialize
dagger init --sdk=java --source=./ --name=java-build
dagger develop --sdk=java --source=./

dagger init --sdk=typescript --source=./ --name=java-build
dagger develop --sdk=typescript --source=./

dagger init --sdk=go --source=./ --name=java-build
dagger develop --sdk=go --source=./

## How to Use
dagger -m ../dagger-modules/java/java-build call publish \
    --source=./ \
    --repository ttl.sh \
    --appName spring-petclinic \
    --version 1.0.0
export JENKINS_PASSWORD=admin123 && dagger -m ../dagger-modules/java/java-build call publish \
    --source=./ \
    --repository "nexus.local" \
    --username admin \
    --password env:JENKINS_PASSWORD \
    --appName "docker-repo/spring-petclinic" \
    --version 1.0.0

dagger -m ../dagger-modules/typescript/java-build call publish \
    --source=./ \
    --repository ttl.sh \
    --appName spring-petclinic \
    --version 1.0.0
export JENKINS_PASSWORD=admin123 && dagger -m ../dagger-modules/typescript/java-build call publish \
    --source=./ \
    --repository "nexus.local" \
    --username admin \
    --password env:JENKINS_PASSWORD \
    --appName "docker-repo/spring-petclinic" \
    --version 1.0.0

dagger -m ../dagger-modules/go/java-build call publish \
    --source=./ \
    --repository ttl.sh \
    --appName spring-petclinic \
    --version 1.0.0
export JENKINS_PASSWORD=admin123 && dagger -m ../dagger-modules/go/java-build call publishWithAuth \
    --source=./ \
    --repository "nexus.local" \
    --username admin \
    --password env:JENKINS_PASSWORD \
    --appName "docker-repo/spring-petclinic" \
    --version 1.0.0


## Useful commands

### Add repot to gitea
git remote remove dagger-modules || true && \
    git remote add dagger-modules http://admin:admin123@localhost:3000/admin/dagger-modules.git && \
    git checkout -b main && \
    git commit -m "initial commit" && \
    git add . && \
    git push --force dagger-modules

git remote remove hello-world || true && \
    git remote add hello-world http://admin:admin123@localhost:3000/admin/hello-world.git && \
    git checkout -b main && \
    git commit -m "initial commit" && \
    git add . && \
    git push --force-with-lease hello-world main

### Cenerate certificate nexus docker
1. openssl req -x509 -nodes -newkey rsa:4096 -days 365 -subj "/CN=nexus.local" -addext "subjectAltName = DNS:DNS:nexus.local, IP:127.0.0.1" -keyout certs/nexus.key -out certs/nexus.cert
2. Insert into nginx/certs folder

### Nexus
1. Create admin user with admin123 password
2. Create a docker proxy named docker-proxy with port 8082 anynonymous pull true and docker-hub (registry-1.docker.io) as remote storage
3. Create a docker hosted named docker-repo with port 8083 and anynonymous pull true
4. Enable "Docker Bearer Token Realm" in "Security -> Realms"

Follow this guide in case is not clear https://medium.com/@sametustaoglu/nexus-proxy-docker-repository-with-nginx-and-traefik-018dd6b04f72

### Jenkins
CRUMB_NEW=$(curl -s 'http://admin:119aa03ac9b5b7f20f7622c561c363b06f@localhost:8090/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,":",//crumb)') \
    && curl -s -X POST \
        -H $CRUMB_NEW \
        "http://admin:119aa03ac9b5b7f20f7622c561c363b06f@localhost:8090/createItem?name=spring-petclinic" \
        --header "Content-Type: application/xml" \
        -d @spring-petclinic.xml

### Docker
echo "admin123" | docker login nexus.local --username admin --password-stdin

docker pull nexus.local/nginx:latest
docker tag nexus.local/nginx:latest nexus.local/docker-repo/nginx:latest
docker push nexus.local/docker-repo/nginx:latest

docker logout nexus.local